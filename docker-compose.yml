services:
  # MongoDB for main application
  mongodb:
    image: mongo:7.0
    container_name: patient-passport-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: patient_passport
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - patient-passport-network

  # PostgreSQL for Central Registry
  postgres:
    image: postgres:15
    container_name: patient-passport-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: patient_passport_registry
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - patient-passport-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: patient-passport-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - patient-passport-network

  # Main Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: patient-passport-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/patient_passport?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRE: 7d
      CENTRAL_REGISTRY_URL: http://central-registry:3001
      CENTRAL_REGISTRY_API_KEY: your-central-registry-api-key
      ENCRYPTION_KEY: your-encryption-key-32-chars-long
      OAUTH2_CLIENT_ID: your-oauth2-client-id
      OAUTH2_CLIENT_SECRET: your-oauth2-client-secret
      OAUTH2_AUTHORIZATION_URL: https://your-oauth2-provider.com/auth
      OAUTH2_TOKEN_URL: https://your-oauth2-provider.com/token
      OAUTH2_USER_INFO_URL: https://your-oauth2-provider.com/userinfo
      OAUTH2_REDIRECT_URI: http://localhost:5000/auth/oauth2/callback
      REDIS_URL: redis://redis:6379
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    networks:
      - patient-passport-network
    volumes:
      - ./logs:/app/logs

  # Central Registry Service
  central-registry:
    build:
      context: ./central-registry
      dockerfile: Dockerfile
    container_name: patient-passport-central-registry
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: patient_passport_registry
      DB_USER: postgres
      DB_PASSWORD: password123
      JWT_SECRET: your-central-registry-jwt-secret
      API_KEY_SECRET: your-api-key-secret
    ports:
      - "3001:3001"
    depends_on:
      - postgres
    networks:
      - patient-passport-network

  # Patient Passport Service - Temporarily disabled
  # patient-passport-service:
  #   build:
  #     context: ./patient-passport-service
  #     dockerfile: Dockerfile
  #   container_name: patient-passport-service
  #   restart: unless-stopped
  #   environment:
  #     NODE_ENV: production
  #     PORT: 3002
  #     MONGODB_URI: mongodb://admin:password123@mongodb:27017/patient_passport_service?authSource=admin
  #     JWT_SECRET: your-patient-passport-jwt-secret
  #     CENTRAL_REGISTRY_URL: http://central-registry:3001
  #     CENTRAL_REGISTRY_API_KEY: your-central-registry-api-key
  #     AFRICAS_TALKING_USERNAME: your-africas-talking-username
  #     AFRICAS_TALKING_API_KEY: your-africas-talking-api-key
  #     TWILIO_ACCOUNT_SID: your-twilio-account-sid
  #     TWILIO_AUTH_TOKEN: your-twilio-auth-token
  #     REDIS_URL: redis://redis:6379
  #   ports:
  #     - "3002:3002"
  #   depends_on:
  #     - mongodb
  #     - redis
  #     - central-registry
  #   networks:
  #     - patient-passport-network

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: patient-passport-frontend
    restart: unless-stopped
    environment:
      VITE_API_BASE_URL: http://localhost:5000/api
      VITE_CENTRAL_REGISTRY_URL: http://localhost:3001
      VITE_PATIENT_PASSPORT_URL: http://localhost:3002
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - patient-passport-network

  # Nginx Reverse Proxy - Temporarily disabled
  # nginx:
  #   image: nginx:alpine
  #   container_name: patient-passport-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - frontend
  #     - backend
  #     - central-registry
  #   networks:
  #     - patient-passport-network

  # OpenMRS (for development/testing) - Temporarily disabled
  # openmrs:
  #   image: openmrs/openmrs-platform:2.2.0
  #   container_name: patient-passport-openmrs
  #   restart: unless-stopped
  #   environment:
  #     OPENMRS_DB_HOST: postgres
  #     OPENMRS_DB_PORT: 5432
  #     OPENMRS_DB_NAME: openmrs
  #     OPENMRS_DB_USER: postgres
  #     OPENMRS_DB_PASSWORD: password123
  #     OPENMRS_DB_DRIVER: org.postgresql.Driver
  #     OPENMRS_DB_URL: jdbc:postgresql://postgres:5432/openmrs
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     - postgres
  #   networks:
  #     - patient-passport-network
  #   volumes:
  #     - ./openmrs-modules:/usr/local/tomcat/.OpenMRS/modules

volumes:
  mongodb_data:
  postgres_data:
  redis_data:

networks:
  patient-passport-network:
    driver: bridge

